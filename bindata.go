// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static/bottom.png
// static/index.html
// static/log.html
// static/top.png
// static/view.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _bottomPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xaf\x01\x50\xfe\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x03\x02\x00\x00\x00\x0a\x08\x06\x00\x00\x00\x07\x07\xe9\x48\x00\x00\x00\x04\x67\x41\x4d\x41\x00\x00\xd6\xd8\xd4\x4f\x58\x32\x00\x00\x00\x19\x74\x45\x58\x74\x53\x6f\x66\x74\x77\x61\x72\x65\x00\x41\x64\x6f\x62\x65\x20\x49\x6d\x61\x67\x65\x52\x65\x61\x64\x79\x71\xc9\x65\x3c\x00\x00\x01\x41\x49\x44\x41\x54\x78\xda\xec\xdd\x51\x4f\x83\x30\x18\x05\xd0\x32\xeb\xfc\xff\x3f\x57\x19\x54\x48\xda\xe4\xb3\x96\x65\x3e\x0c\x4d\x3c\x27\xb9\x01\x06\x7c\xcf\xbd\x1b\x64\x53\x29\x25\x4d\x9b\x94\xd2\x9e\xcb\x96\x97\x9a\xbc\xe5\xb5\xe6\xba\xe5\xad\x6e\xaf\xe1\x5c\xbb\xf6\x52\xef\xdf\x03\x00\x00\x3c\x47\xa9\x59\xb7\x2c\x35\xf3\x96\xdb\x96\x8f\x9a\xf7\xba\x9d\xc3\xb9\x76\xed\x7e\x5f\xd9\xe5\xc1\xe0\xb5\x2e\xe8\x97\xc1\xe2\x7e\xad\x83\x72\x57\x02\x2e\xf5\xbc\x22\x00\x00\x00\xcf\x2d\x02\x6d\x5d\x1e\xcb\xc0\xad\x66\xae\x25\xe0\x16\x0a\x40\xbb\xb6\xc4\x41\xb9\x1b\x38\x2a\x03\xb1\x79\x2c\xa1\x00\xc4\x12\x30\x29\x02\x00\x00\x70\x5a\x11\x28\x83\x32\x10\x0b\xc1\xa8\x04\xc4\xa4\x7c\x30\xbc\x0d\xee\x8f\x97\x41\x01\xf0\x6b\x00\x00\x00\x9c\x5f\x06\xd6\x3b\x85\x60\x54\x02\xbe\xc8\x77\x86\xa6\xae\x35\xb4\xe1\xb1\x04\xc4\x00\x00\x00\xe7\x95\x81\x7e\xad\x3e\x4a\x39\x2a\x03\xb9\x1b\x36\x85\xfd\xf6\x78\x50\xe9\x8e\xfb\x17\x83\x63\x09\x50\x08\x00\x00\xe0\xb9\x05\xa0\xdf\x2f\x83\x05\x7f\xff\x38\xd0\xb7\xfb\xf3\x03\xc3\xa7\xb0\x3d\x7a\x89\x58\x09\x00\x00\x80\xf3\xcb\x40\xea\x16\xfb\x65\x50\x00\xca\x68\xc8\xd1\xa3\x41\xd3\x41\x73\xf0\xed\x3f\x00\x00\xfc\xdd\x62\xf0\xc8\xfe\xb0\x08\xa4\x7b\xad\xe1\xe0\x73\x85\x00\x00\x00\x7e\xb7\x00\xfc\xf8\xfc\xb4\xff\xa1\x18\x00\x00\xf0\xbf\x7c\x0a\x30\x00\x94\x25\x99\x85\x58\x0c\x06\x0c\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x6b\x49\xa2\x65\xaf\x01\x00\x00")

func bottomPngBytes() ([]byte, error) {
	return bindataRead(
		_bottomPng,
		"bottom.png",
	)
}

func bottomPng() (*asset, error) {
	bytes, err := bottomPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bottom.png", size: 431, mode: os.FileMode(420), modTime: time.Unix(1574103504, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xc1\x6e\xdb\x38\x10\x3d\x5b\x5f\x31\x3b\xf7\x8d\x60\x1b\x58\x64\x01\x8a\xc0\x6e\xd2\xde\x82\xa4\x45\x8b\x22\x27\x83\x12\x19\x8b\x28\x45\x0a\x22\xe5\x34\xb7\xa4\xd7\xf6\x1f\x8a\x9e\x7a\x0d\x82\x06\x68\x5c\xc4\xf9\x05\xfa\x8f\x0a\x52\x92\x53\xbb\xbd\xe4\x50\x5f\x2c\x92\x33\x6f\xde\x9b\x21\x1f\xf9\xeb\xf0\xf8\xe0\xd5\xe9\xc9\x33\x28\x5d\xa5\x68\x42\xc2\x1f\x28\xa6\xe7\x19\x0a\x8d\x61\x43\x30\x4e\x13\xe2\xa4\x53\x82\x1e\x9e\x1e\x1d\xc3\x49\x23\xb5\x83\xd7\x92\xa4\xdd\x66\x42\x94\xd4\x6f\xa1\x11\x2a\x43\xeb\x2e\x94\xb0\xa5\x10\x0e\xc1\x5d\xd4\x22\x43\x27\xde\xb9\xb4\xb0\x16\xa1\x6c\xc4\x59\x86\x0b\x29\xce\xf7\xe2\xba\x12\x5c\xb2\x0c\x99\x52\x48\x93\x84\xa4\x7d\xa5\xdc\xf0\x0b\x90\x3c\xc3\x8a\x49\x3d\x0b\x2b\x04\x9a\x8c\x92\x11\x91\xd5\x3c\x1e\x38\x53\x23\xd8\xa6\x88\x5f\x7b\xb5\x9e\x23\x30\xe5\x32\x44\x9a\x8c\x08\x97\x8b\x18\x74\x66\x9a\x6a\x56\x18\xed\x98\xd4\xa2\xc1\x88\x30\x22\xe5\x98\x12\xb6\x2b\x83\x51\x92\x96\x63\x1a\xce\x43\xd6\x63\xfa\xfe\xfe\x3f\xff\x4e\x11\x0a\xc5\xac\xcd\x90\xd5\xb5\x96\xae\x31\x08\x50\x09\x57\x1a\x9e\x61\x6d\xac\x43\x60\x85\x93\x46\x67\x98\xd6\x01\x32\x94\x0a\xbf\xc8\xa4\x4f\x8d\x68\x5c\xd8\xa2\x91\x75\x88\xed\x62\x48\x39\xd9\xa5\x52\x4e\xba\x93\x9a\x76\x7b\x8a\xe5\x42\x59\x38\x33\x0d\xbc\xf9\x1f\x98\xe6\x70\x64\x78\xde\x5a\xe0\x62\x21\x0b\x61\x49\x5a\x47\xde\x29\x97\x0b\x1a\xcb\x8e\x62\x7e\xab\x20\x02\xf5\x54\x94\x8c\xa2\x94\x9c\x8d\x63\x33\x47\x24\x02\x0f\xf4\x7e\x66\x16\x6a\x65\x28\x94\xa8\x84\x76\xb3\x31\x52\xff\xc9\xaf\xfc\x57\xff\xe0\xbf\xad\xaf\xd6\x1f\xc1\x2f\xc1\xdf\xfb\x6b\xbf\xf4\xdf\xfd\xad\xbf\xf3\x4b\x7f\x0b\x24\x8d\x70\x11\x38\x10\x89\x14\xc2\xe0\x59\x23\x58\xac\xfc\x88\x07\x9a\x55\x22\xc3\x82\xc5\x72\x07\x46\x3b\xa1\x9d\xdd\x34\xb9\x0f\x84\x4d\xb6\xad\xe2\x05\x21\xe9\xb0\x43\x61\x23\xb8\xfb\x52\x92\x6e\x49\x9c\x3c\x4d\xe2\x04\xa9\xff\xb2\x7e\xef\x57\xe0\x6f\xe0\xc5\xcb\xbf\xfd\x32\xea\x7d\x8a\xaa\xc9\xa0\x2a\x67\x4d\x61\xb8\xf8\x13\xaa\xa6\x4f\x53\x35\x45\xea\x3f\x83\x5f\xc6\x49\xad\xfc\x1d\xac\xaf\x82\xc6\xf5\xa5\x5f\xf9\xfb\xf5\x87\x47\xa1\xbf\x93\x49\xac\x50\xa2\x70\xbb\xec\xfb\xdd\xf0\x6e\xdb\x0a\xb7\x3a\x30\xdd\xe9\xc0\x7f\x4a\xce\x35\x46\x29\x23\x62\x22\x41\x58\x30\xd5\x8a\x0c\xab\x78\x81\x67\xdd\x05\xc6\x1e\x54\xf0\x0c\x87\xaf\xc0\x3c\x5e\xae\x1b\x7f\x4d\xd2\x2e\x99\x26\x3b\x28\xe7\x39\x42\x88\x7b\x58\x5f\xfa\xeb\xed\xc8\xd8\xbe\x0e\x8c\xfe\xda\xd4\xed\x57\xd1\x2b\xcc\x5b\xe7\x8c\xb6\xdd\xb3\x04\x00\x20\x52\xd7\xad\xeb\x2d\xac\x94\x9c\x0b\x3d\x28\x8c\x6f\x59\x72\x1c\x98\xf4\x26\x91\x6e\x72\x23\x7a\x0f\x10\x7a\x64\xd9\x42\x3c\x37\x4d\x85\xdb\xd5\x66\x61\xf4\x83\x4b\xda\x36\xaf\xa4\x1b\x4a\x0c\xab\xbe\x42\xb4\x82\xbe\xc2\x46\x03\x49\xdb\x6e\x66\x69\x20\x44\x83\x3f\xa6\xdd\xf8\x36\x3e\x99\x1b\xe7\x4c\xd5\x5b\x65\xb7\xd8\x75\xcb\x34\xf8\x2b\x0d\xe6\x1b\xed\xff\x47\x00\x00\x00\xff\xff\x1f\xcf\xc3\xce\x0f\x06\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 1551, mode: os.FileMode(420), modTime: time.Unix(1574635690, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _logHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xd1\xae\x9b\x46\x10\x7d\xe7\x2b\xa6\x5b\x55\x21\xba\x2a\xdc\xa8\xea\x0b\x06\x1e\xea\x5e\x29\x95\x52\xb5\x52\x2c\x55\x51\x9a\x87\x85\x1d\xc3\x36\xcb\x0e\x62\xc7\x70\xad\xc8\xff\x5e\x2d\xd8\x80\xed\x1b\x29\xed\x0b\xf6\x9e\x1d\xce\x99\x39\xb3\x3b\xa4\xdf\xfd\xfa\xc7\x76\xf7\xe1\xcf\x27\xa8\xb9\x31\x79\x90\xfa\x1f\x30\xd2\x56\x99\x40\x2b\x3c\x80\x52\xe5\x41\xca\x9a\x0d\xe6\x5b\x6a\x1a\x69\x15\x3c\x3d\xcb\xa6\x35\x98\xc6\x13\x1c\xa4\xae\xec\x74\xcb\xc0\xc7\x16\x33\xc1\xf8\xcc\xf1\x3f\xb2\x97\x13\x2a\xf2\x60\xd0\x56\xd1\x10\x91\x35\x24\x15\x64\xb0\x3f\xd8\x92\x35\x59\x08\x5f\xc3\x97\x00\x00\xa0\x97\x1d\x94\x64\xed\x66\x5e\x19\xaa\x20\x03\x45\xe5\xa1\x41\xcb\x51\x85\xfc\x64\xd0\xff\xfd\xe5\xf8\x9b\x0a\x85\xa1\x4a\xbc\x9e\xa2\x67\x36\xd9\xb6\x68\xd5\x3b\xaa\x42\xcd\xd8\x5c\xa8\x2f\x84\x8a\xde\x97\x1d\x19\x03\x99\xe7\x8e\xdc\xb8\xd8\x51\x0b\xf9\x6a\xfd\x16\x75\x55\x33\xfc\x38\x42\xa5\xd1\x68\x79\x86\xde\x6c\x66\x3e\xbf\x3b\xa9\x6d\x6b\x6d\xd4\xa4\xb7\x6c\xeb\x3d\x84\x17\xb9\x75\x1a\x97\x57\x17\xed\xec\x5b\xb4\x17\xe2\x53\xb0\x3c\xbd\xc8\x64\xec\x47\xf1\x17\x16\xef\xa9\xfc\x8c\x2c\x3e\xad\xf5\xbc\xa3\x90\x81\xc5\x01\xe6\x88\x50\x0c\x2e\x89\x63\x01\x0f\x8b\xb9\x86\x4a\xe9\x1d\x8c\x6a\x72\x0c\x0f\x20\xe2\xc1\x89\x55\x3d\x9e\x27\x22\x5b\x1a\x72\x78\xd5\x3e\xec\xf9\xb6\x3e\x6f\xb5\xb7\x63\xdd\xbc\xb2\x43\xc9\x78\xee\x5f\x28\x94\xee\xd7\xec\x63\x31\x8c\x4d\xa4\xad\xc5\xee\xed\xee\xf7\x77\x90\x81\x48\x8b\x7c\x4b\xd6\xe2\xa4\x34\x4a\xab\x28\x8d\x8b\x5c\x5c\xbf\x79\xd3\xf4\x95\x57\x77\xf9\x37\xe8\x9c\xac\xbe\xa9\x82\x73\xa8\x83\x0c\xb0\xe7\x48\x49\x96\x91\x6b\x8d\xe6\xf0\xd5\xdf\xf6\xd5\x4d\xf2\x7b\xea\x20\x1c\xeb\x86\x0c\x1e\x37\xa0\x21\x9d\x09\x22\x83\xb6\xe2\x7a\x03\xfa\xe1\xe1\x56\xe8\xff\xdb\x75\x6d\xd9\x0e\x9f\x19\xb2\x59\xf2\xa3\xfe\x74\x1f\xfd\x55\x9b\x96\x03\xb5\x32\xed\x04\x68\x1c\xde\x5c\xa0\xff\x96\xe6\x8b\x1d\xfd\x40\x87\x0e\x8a\x8e\x06\x87\xfe\x42\xa2\x03\x4b\x0c\xee\xd0\xb6\xd4\xf1\x72\x46\xdd\x6d\xa3\x5f\xcc\xfe\x14\x9c\x36\x41\x1a\x4f\x53\xc6\x0f\x21\x3e\x1a\x5c\xcf\xa0\xd2\x39\x91\x07\xe3\x48\x9b\x2a\xa1\x1e\xbb\xbd\xa1\x21\x81\x5a\x2b\x85\x76\x13\x9c\x82\x82\xd4\xf1\xab\xdb\x1e\x6d\xa5\x52\xda\x56\x09\x3c\x4e\xeb\x46\x76\x95\xb6\xf3\x72\xd0\x8a\xeb\x04\xde\x3c\x3e\xfe\x30\x01\xf5\x78\x67\xd7\x48\x21\xcb\xcf\x55\x47\x07\xab\x12\xa8\x3a\x79\xf4\xb2\xdf\xfb\xf9\xf6\xe5\x6e\x7b\xa8\x35\xe3\x8b\x3a\x4b\x1a\xd1\xcf\xd8\xdc\x3f\xcf\x51\xe4\xb4\x3f\xd8\x09\xc8\xc2\x91\x39\x5c\xc8\x98\xda\x64\x1d\x67\x70\xcf\x57\x40\x37\x25\xbd\x42\x0a\x62\xa6\x26\x81\x9f\x2e\xc0\x62\x8f\x3c\x30\xcd\x45\xb4\xdd\x74\x50\x56\xf9\x9e\x7c\x5b\x7c\x37\xf2\x20\x8d\xcf\x5f\x10\xef\x73\x1e\xa4\x4a\xf7\xa0\x55\x36\xce\xef\x3c\x8d\x95\xee\x7d\xcc\x79\x33\x1e\xbf\x42\xff\x06\x00\x00\xff\xff\x1e\xd1\x15\xd1\x95\x06\x00\x00")

func logHtmlBytes() ([]byte, error) {
	return bindataRead(
		_logHtml,
		"log.html",
	)
}

func logHtml() (*asset, error) {
	bytes, err := logHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "log.html", size: 1685, mode: os.FileMode(420), modTime: time.Unix(1574626860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _topPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xa1\x01\x5e\xfe\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x03\x02\x00\x00\x00\x0a\x08\x06\x00\x00\x00\x07\x07\xe9\x48\x00\x00\x00\x04\x67\x41\x4d\x41\x00\x00\xd6\xd8\xd4\x4f\x58\x32\x00\x00\x00\x19\x74\x45\x58\x74\x53\x6f\x66\x74\x77\x61\x72\x65\x00\x41\x64\x6f\x62\x65\x20\x49\x6d\x61\x67\x65\x52\x65\x61\x64\x79\x71\xc9\x65\x3c\x00\x00\x01\x33\x49\x44\x41\x54\x78\xda\xec\xdb\xeb\x6e\xc2\x30\x0c\x06\xd0\xa4\x14\xf6\xfe\xaf\x3b\xc6\xb2\x15\xb5\x93\xeb\x5e\xb4\x21\x95\x4d\xda\x39\x92\x49\x20\xe5\xbf\x3f\x1c\x6a\x6b\xad\x00\x00\x00\xff\x4b\x3f\xbc\xd4\x5a\xf7\x9e\xa9\x0f\x9e\x01\x00\x00\xc7\x6a\x8f\x9c\x0d\xc3\x80\xfe\x1b\xcd\x7d\x5d\xd9\x57\x81\x00\x00\x00\xfe\x4c\x00\x68\x3f\x0d\x06\xfd\x46\x43\xbf\xb6\xc6\xda\x0b\x05\x00\x00\xc0\xf3\xc2\x40\x5c\x63\xd5\x74\x16\xdf\xcf\x82\xc0\x5e\xf3\xdf\xa5\x75\x2b\x14\x00\x00\x00\xcf\x0d\x01\xb1\xde\xd3\x9a\x43\xc0\x57\x18\xd8\x9b\x08\xc4\xe6\x7f\xa8\x53\xd8\xe7\x50\x20\x0c\x00\x00\xc0\xef\x84\x80\xd8\xfc\x0f\x75\x1b\x7b\xf3\x1c\x0a\x36\x27\x02\x25\x85\x80\x2e\x85\x80\x3e\x85\x81\xae\x2c\x27\x04\x00\x00\xc0\xf1\x41\xa0\xa5\xe6\x3f\x87\x80\x18\x06\x4a\x99\x4f\x08\x56\x83\x40\xbe\x0e\x74\x0a\x21\xe0\x9c\x02\xc1\xa9\x2c\xa7\x03\x00\x00\xc0\xf1\x41\x20\xfe\xda\x7f\x1b\xeb\x2d\x04\x80\x29\x0c\x4c\xcf\xd7\xb0\x9f\x05\x81\x7c\xc5\x27\x4e\x02\xce\x2b\x95\x27\x04\xd3\x77\x00\x00\x80\x63\xe5\x10\x30\x05\x80\xeb\x58\x35\x35\xfe\xf9\x0f\xc4\xf7\xcf\xd7\x26\x02\xf9\x3a\xd0\xd0\xf8\x5f\x3e\xeb\x65\x5c\x2f\x65\x3e\x21\x88\x61\xc0\x54\x00\x00\x00\x8e\xd3\xca\x72\x12\x70\x1d\xc3\xc0\xeb\xd8\x9b\x6f\x85\x80\xa9\xee\x3e\x04\x18\x00\x67\x7a\x60\x82\x24\x4c\x0a\x02\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x51\xf1\xa7\xdc\xa1\x01\x00\x00")

func topPngBytes() ([]byte, error) {
	return bindataRead(
		_topPng,
		"top.png",
	)
}

func topPng() (*asset, error) {
	bytes, err := topPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "top.png", size: 417, mode: os.FileMode(420), modTime: time.Unix(1574103504, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x56\x4d\x8f\x23\x35\x10\x3d\xc7\xbf\xc2\xcc\x28\x12\x84\xe9\x9e\xce\xd7\xee\x8c\xfb\x04\x07\x10\xd2\xde\x40\x5c\x10\x5a\xb9\xdb\xee\xa4\xb4\x6e\xdb\xb2\x9d\x4c\x02\xca\x7f\x47\xb6\xfb\x3b\xd9\x20\x10\x1c\x60\x32\x9a\x49\xb7\x5d\xaf\xca\xaf\x5e\x55\xb9\x50\xec\x8c\x7e\x47\xb3\x82\x96\x9f\x76\x46\x1d\x24\x23\x8f\x95\xff\xc9\xd1\xac\x52\xd2\x25\x15\xad\x41\x9c\xc9\xc3\x87\x43\x09\x8c\xe2\xef\x0d\x95\x8c\x3f\x3c\xe1\x9f\xe8\x5e\xd5\xf4\x09\x7f\x63\x80\x8a\x27\xfc\x33\x37\x8c\x4a\xfa\x84\x2d\x95\x36\xb1\xdc\x40\x87\x60\xe1\x37\x4e\x6c\x4d\x85\xc8\xd1\xac\xa6\x66\x07\x92\xbc\xe8\x13\xce\xf0\xf2\x9d\x3e\xe5\x68\xe6\xf8\xc9\x25\x54\xc0\x4e\x92\x92\x4b\xc7\x4d\x8e\x2e\x08\x3d\x56\xca\xd4\x1f\x4b\x25\x1d\x05\xc9\xcd\x8d\x20\x73\x34\x2b\x94\x61\xdc\x90\xa5\x3e\x61\xab\x04\x30\xfc\x58\x96\x65\xef\x26\xc3\xf4\xe0\xd4\xd8\x85\xe0\x95\xcb\xd1\xec\x0d\x98\xdb\x93\x77\x9b\xcc\x87\xe0\xdd\x39\xa5\xbd\x0f\x06\x56\x0b\x7a\x26\x85\x50\xe5\xa7\x1c\xcd\xf6\x1c\x76\x7b\x47\x96\x61\x5f\x8b\xeb\x9f\x02\x34\xce\x7a\xa8\x6d\x0b\xe5\x03\x4f\xa9\xd6\x12\x9c\x51\x1e\xb3\xb1\x5a\x79\xab\xf0\xc7\x5b\x69\xca\x18\xc8\x1d\xc9\x70\x16\x5e\x06\x53\xf4\xbc\x58\x2c\x16\xf8\x3b\x65\x6a\xfc\x23\x2f\x1d\x28\x89\xfd\x9b\x67\x34\x02\x1c\x66\x66\x94\x98\xbf\x9b\x97\x0b\xea\x1d\x60\x01\xde\x47\x73\xaa\xe5\xbc\x3b\x13\x3e\x88\xce\x79\x30\x5e\x66\xd9\x3c\x47\x33\x01\xd6\x25\xd6\x9d\x05\x4f\xdc\x59\x73\x22\x95\xe4\x83\x1c\x0c\xcf\xda\xb1\x15\x4d\x5b\xe0\xe8\x71\x4a\xfd\x0d\x80\x8d\x3e\xe1\xad\x67\x51\x9f\xf0\x6b\xc8\x88\x56\x16\x3c\x4d\xc4\x70\x41\x1d\x1c\xf9\x10\x95\xd0\xca\x45\xe9\x94\x82\x53\x43\x0a\xe5\xf6\x39\x9a\x79\x51\x71\xe9\xc8\x43\xfa\x90\x7f\x36\xe3\xde\xed\x11\x2c\x14\x20\xc0\x9d\xc9\x1e\x18\xe3\x32\x32\x55\x1c\x9c\x53\xd2\xfe\xbb\xe8\x57\xb8\xb7\xe9\x49\x9c\xd2\x8d\x3a\x2f\x08\x2d\xf0\xde\xd5\x02\x0f\x48\x6d\xf5\x3b\x1f\xae\x0f\x7d\xdc\xdc\xd0\x00\x60\x06\xc7\x61\x66\x40\x0a\x90\x3c\x69\x22\xe8\x79\x6e\xf7\x95\x4a\x28\x43\x1e\x37\x9b\xcd\xb0\x06\x37\xa1\xd8\xa7\x9a\x7f\x19\x54\x8b\x87\xb0\x9a\xca\x2b\x8c\x4a\x28\xea\xda\x92\xfd\x8b\x80\x0c\x8e\xa9\xb7\xbc\x3e\xc0\x14\x38\x4a\x72\xf3\x32\xbf\xb2\x37\x9e\x9b\x3b\x00\x61\xfd\x2e\x82\x77\x81\xd3\x9a\x33\x38\xd4\x7d\x59\x4d\xe5\xdf\x3b\xbb\xb3\x37\x0d\x72\x98\xea\xe2\xd2\x36\x8d\x6f\x63\x4e\x9b\x7e\x01\x52\x1f\x5c\x93\xe7\x8f\xbe\xfd\x79\x3b\x75\xe4\xa6\x12\xea\x8d\x04\xe9\x09\x3e\x62\xf0\x7d\xa8\xa7\xe8\x33\xb6\xcd\x81\x1a\x71\xc0\x9b\x94\xff\x2a\x94\x7f\xa3\xc3\x10\x3d\xd9\x36\x49\x88\x21\xfd\xe0\x8d\x2c\xa6\x92\xe1\x0f\xb4\xe0\xa2\x0d\x4e\xf8\x87\x94\x71\x5b\x1a\xd0\xbe\x7a\x43\x77\x8f\xbd\xbc\xe9\x1e\x8d\x0c\x56\xab\xd5\x0d\xe9\xf7\x31\xbc\x6e\xe7\xed\xf3\x5b\x14\xf2\xfb\x2c\x0b\x3d\x49\xf2\xa4\x95\xf6\x36\xc4\x39\xd4\xca\xb2\x09\xd3\x8b\x2e\xb5\xe7\xba\x50\xd3\xd6\xb6\xdc\xce\xa7\x30\xeb\x26\x0f\x91\xda\x96\xd3\xc9\x50\xc2\x07\x23\xbe\x4c\xd3\xe7\xf8\x0b\x35\xdd\x71\xfb\x6c\xf7\x94\xa9\xb7\x74\x07\xd5\x57\xd8\x70\xcd\xa9\x4b\x4e\xd8\x29\xdd\x4d\xb0\xa4\x50\xce\xa9\x7a\x38\xc8\x18\x63\xfd\xb2\x57\xd1\x68\xca\xad\xfd\xa7\x5f\x8f\xe4\xdf\xd9\x10\xba\x44\xbf\xfc\xbe\xf4\x9f\x9e\xe6\xf5\x7a\x9d\xdf\xe8\xec\x37\x3a\xf0\x2a\x8e\xaf\x0b\x42\x9e\x00\x6a\x38\x4d\xdb\x2f\xff\x47\x36\xfe\xa1\xeb\xcf\x35\x9f\xb1\xce\x5e\x5f\xa3\xa4\x2c\x17\xbc\x74\x69\xfc\x37\xe8\x82\xf7\xf3\xb2\x9c\x5c\x25\x96\x5d\x5f\xfc\x4f\xa7\xc1\xdf\x83\xc6\x8c\xfc\x52\x0a\x6a\xed\xaf\x83\xbb\xd4\xd5\xb1\xe3\xf4\x22\x15\x18\xeb\x92\x72\x0f\x82\x7d\x1d\x26\xd9\x9f\xe0\xf4\xb6\xa9\xa5\x15\x35\x80\xaf\x52\x31\x6e\x78\xf8\x0b\xa8\xb5\x32\x8e\xca\x7e\x24\x0d\x88\x1a\x34\x88\x69\x1f\xdf\x66\xa3\x5c\x7f\x6e\x39\x1a\x0b\x6a\x76\xbc\x5f\x9c\xe8\x64\xb2\xda\x4d\x88\xae\x24\x7b\xf0\xee\xfe\xca\xeb\xf1\x96\x0e\xa3\xd9\xb1\x6a\x77\xfc\x11\x00\x00\xff\xff\x8f\x27\x3f\x6d\x13\x0c\x00\x00")

func viewCssBytes() ([]byte, error) {
	return bindataRead(
		_viewCss,
		"view.css",
	)
}

func viewCss() (*asset, error) {
	bytes, err := viewCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view.css", size: 3091, mode: os.FileMode(420), modTime: time.Unix(1574635342, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bottom.png": bottomPng,
	"index.html": indexHtml,
	"log.html":   logHtml,
	"top.png":    topPng,
	"view.css":   viewCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bottom.png": &bintree{bottomPng, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"log.html":   &bintree{logHtml, map[string]*bintree{}},
	"top.png":    &bintree{topPng, map[string]*bintree{}},
	"view.css":   &bintree{viewCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
