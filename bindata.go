// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static/bottom.png
// static/index.html
// static/top.png
// static/view.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _bottomPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xaf\x01\x50\xfe\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x03\x02\x00\x00\x00\x0a\x08\x06\x00\x00\x00\x07\x07\xe9\x48\x00\x00\x00\x04\x67\x41\x4d\x41\x00\x00\xd6\xd8\xd4\x4f\x58\x32\x00\x00\x00\x19\x74\x45\x58\x74\x53\x6f\x66\x74\x77\x61\x72\x65\x00\x41\x64\x6f\x62\x65\x20\x49\x6d\x61\x67\x65\x52\x65\x61\x64\x79\x71\xc9\x65\x3c\x00\x00\x01\x41\x49\x44\x41\x54\x78\xda\xec\xdd\x51\x4f\x83\x30\x18\x05\xd0\x32\xeb\xfc\xff\x3f\x57\x19\x54\x48\xda\xe4\xb3\x96\x65\x3e\x0c\x4d\x3c\x27\xb9\x01\x06\x7c\xcf\xbd\x1b\x64\x53\x29\x25\x4d\x9b\x94\xd2\x9e\xcb\x96\x97\x9a\xbc\xe5\xb5\xe6\xba\xe5\xad\x6e\xaf\xe1\x5c\xbb\xf6\x52\xef\xdf\x03\x00\x00\x3c\x47\xa9\x59\xb7\x2c\x35\xf3\x96\xdb\x96\x8f\x9a\xf7\xba\x9d\xc3\xb9\x76\xed\x7e\x5f\xd9\xe5\xc1\xe0\xb5\x2e\xe8\x97\xc1\xe2\x7e\xad\x83\x72\x57\x02\x2e\xf5\xbc\x22\x00\x00\x00\xcf\x2d\x02\x6d\x5d\x1e\xcb\xc0\xad\x66\xae\x25\xe0\x16\x0a\x40\xbb\xb6\xc4\x41\xb9\x1b\x38\x2a\x03\xb1\x79\x2c\xa1\x00\xc4\x12\x30\x29\x02\x00\x00\x70\x5a\x11\x28\x83\x32\x10\x0b\xc1\xa8\x04\xc4\xa4\x7c\x30\xbc\x0d\xee\x8f\x97\x41\x01\xf0\x6b\x00\x00\x00\x9c\x5f\x06\xd6\x3b\x85\x60\x54\x02\xbe\xc8\x77\x86\xa6\xae\x35\xb4\xe1\xb1\x04\xc4\x00\x00\x00\xe7\x95\x81\x7e\xad\x3e\x4a\x39\x2a\x03\xb9\x1b\x36\x85\xfd\xf6\x78\x50\xe9\x8e\xfb\x17\x83\x63\x09\x50\x08\x00\x00\xe0\xb9\x05\xa0\xdf\x2f\x83\x05\x7f\xff\x38\xd0\xb7\xfb\xf3\x03\xc3\xa7\xb0\x3d\x7a\x89\x58\x09\x00\x00\x80\xf3\xcb\x40\xea\x16\xfb\x65\x50\x00\xca\x68\xc8\xd1\xa3\x41\xd3\x41\x73\xf0\xed\x3f\x00\x00\xfc\xdd\x62\xf0\xc8\xfe\xb0\x08\xa4\x7b\xad\xe1\xe0\x73\x85\x00\x00\x00\x7e\xb7\x00\xfc\xf8\xfc\xb4\xff\xa1\x18\x00\x00\xf0\xbf\x7c\x0a\x30\x00\x94\x25\x99\x85\x58\x0c\x06\x0c\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x6b\x49\xa2\x65\xaf\x01\x00\x00")

func bottomPngBytes() ([]byte, error) {
	return bindataRead(
		_bottomPng,
		"bottom.png",
	)
}

func bottomPng() (*asset, error) {
	bytes, err := bottomPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bottom.png", size: 431, mode: os.FileMode(420), modTime: time.Unix(1574103504, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x6f\xe3\x36\x10\x3d\x5b\xbf\x62\x3a\x77\x9b\xb5\x0d\x14\x49\x4b\x11\x68\x9c\x5d\xb4\x40\xd2\x0d\x16\x0e\xb6\x7b\x32\x68\x71\x62\x11\xe5\x87\x2a\x52\x76\xf2\xef\x0b\x92\x92\x93\xb8\x7b\xd9\x02\xd5\x89\xa4\xe6\xbd\x79\x6f\x86\x1c\xfe\xc3\xed\xa7\xcd\xf6\xeb\xc3\x07\x68\xa3\x35\xf0\xf0\x78\x73\xf7\xfb\x06\x70\xce\xd8\x97\xf5\x86\xb1\xdb\xed\x2d\xfc\xf9\xdb\xf6\xfe\x0e\x96\x8b\x1f\x61\xdb\x4b\x17\x74\xd4\xde\x49\xc3\xd8\x87\x3f\x10\xb0\x8d\xb1\xfb\x99\xb1\xd3\xe9\xb4\x38\xad\x17\xbe\x3f\xb0\xed\x67\xf6\x9c\xb8\x96\x09\x3c\x2e\xe7\xf1\x0d\x72\xa1\xa2\x42\x51\xf1\x9c\xf0\xd9\x1a\x17\xea\x6f\xd0\x2c\xaf\xaf\xaf\x0b\x3a\xc7\x92\x54\xa2\xe2\x96\xa2\x84\x14\x3b\xa7\xbf\x07\x7d\xac\x71\xe3\x5d\x24\x17\xe7\xdb\x97\x8e\x10\x9a\xb2\xab\x31\xd2\x73\x64\x09\xfb\x0b\x34\xad\xec\x03\xc5\xfa\x71\xfb\x71\x7e\x95\xa8\xa2\x8e\x86\xc4\xed\xd7\xfb\x4f\xf0\xd0\x6b\x17\xe1\x51\x73\x56\x0e\x2b\x6e\xb4\xfb\x0b\x7a\x32\x35\x86\xf8\x62\x28\xb4\x44\x11\x21\xbe\x74\x34\x92\x36\x21\x20\xb4\x3d\x3d\xd5\x78\xd4\x74\x5a\xe4\xbd\x25\xa5\x65\x8d\xd2\x24\xad\x15\x67\xa3\xda\xbd\x57\x2f\xa0\x55\x8d\x56\x6a\xb7\x4b\x3b\x04\x51\xcd\xaa\x19\xd7\xf6\x90\x7f\x44\xdf\x21\x84\xbe\xc9\xab\x45\xe7\x0e\x08\xd2\xc4\x1a\x51\x54\x33\xae\xf4\x31\x07\x3d\xf9\xde\xee\x92\x35\xa9\x1d\xf5\x98\x19\x66\xbc\x5d\x0a\x2e\x2f\x6d\x48\xc1\x59\xbb\x14\xe9\x7f\x42\xbd\xc2\xaf\xae\x7e\xba\x5e\x23\x34\x46\x86\x50\xa3\xec\x3a\xa7\x63\xef\x11\xc0\x52\x6c\xbd\xaa\xb1\xf3\x21\x22\xc8\x26\xb5\xa8\x46\xd6\x25\xca\x94\x2a\x7d\x59\xc9\x08\xcd\x6c\x8a\x42\xd3\xeb\x2e\xc5\x96\x18\xde\xae\x2e\xa5\xb4\xab\xf2\xa7\x13\xe5\xcc\xc8\x3d\x99\x00\x4f\xbe\x87\x2f\x37\x20\x9d\x82\x7b\xaf\xf6\x43\x00\x45\x47\xdd\x50\xe0\xac\xcb\xba\x99\xd2\x47\x91\xd3\xce\x32\x7e\x30\x90\x89\x46\x29\x46\x67\x53\x46\xef\x96\xb9\x98\x33\x9e\x89\x27\x79\x6f\x95\xa5\x5c\x35\x92\x21\x4b\x2e\xee\x96\x28\x6e\x64\xdf\x78\x45\x30\x5e\x9a\x00\x9c\x65\x70\xa6\x49\x69\x73\xc2\xd4\x66\xd9\x93\xcc\x79\x5e\xd1\xe0\xa4\xa5\x1a\x1b\x99\xc9\x27\x8a\x73\x49\xc7\x40\x38\xa3\x83\xcd\xd7\x81\xb3\xe9\x44\xc0\xd9\x5e\x59\x19\x2d\xde\x19\x5a\x7d\x9f\xa1\x15\x8a\x4d\x11\xf3\x5f\x0c\xad\x26\x43\xfb\x52\x94\xff\xc3\xd0\xfa\xfb\x0c\xad\x5f\x3b\xf4\xab\xd1\x07\xf7\x2d\x37\x3c\x90\xa1\x26\x5e\x8a\x1c\x4f\xd3\x3b\x1c\x2c\xbe\x33\xba\xbe\x30\x9a\xa9\x31\x2b\x9e\x71\x5f\xea\x77\x94\x66\xa0\x1a\x6d\xbe\x90\xbb\x72\x21\x71\x24\x25\x55\xe3\xb4\x42\x71\x47\x4f\x91\xb3\x02\x13\xd5\x05\xfe\xb4\x47\x10\x9f\xf5\xa1\x7d\x13\x92\x0b\x53\xf0\xe2\xdf\xe5\x7a\x7f\xb1\x47\x53\xfb\x21\x46\xef\x42\x79\x59\x00\x00\x5c\xbb\x6e\x88\xe3\x14\x6a\xb5\x52\xe4\x26\x53\xf9\x39\x6a\x85\x93\x84\xf1\x9d\xb3\x33\x36\xb3\x8f\x04\xa9\x2c\x41\x1e\xe9\xa3\xef\x2d\xbe\xcf\xb6\x4b\x4d\x9d\x06\x5d\x18\xf6\x56\xc7\x29\xc5\xb4\x1b\x33\xe4\xd7\x3c\x66\x38\x7b\xe0\x6c\x28\x6d\x62\x49\x90\x48\x23\x8e\x95\x8e\x9d\x47\xdd\xde\xc7\xe8\xed\x38\xed\xca\xe6\x72\xe0\xb1\x34\x22\x45\x9a\x9f\xd1\x1a\x51\xfd\x13\x00\x00\xff\xff\xfc\xd0\x6a\xad\x9b\x06\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 1691, mode: os.FileMode(420), modTime: time.Unix(1574103504, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _topPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xa1\x01\x5e\xfe\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x03\x02\x00\x00\x00\x0a\x08\x06\x00\x00\x00\x07\x07\xe9\x48\x00\x00\x00\x04\x67\x41\x4d\x41\x00\x00\xd6\xd8\xd4\x4f\x58\x32\x00\x00\x00\x19\x74\x45\x58\x74\x53\x6f\x66\x74\x77\x61\x72\x65\x00\x41\x64\x6f\x62\x65\x20\x49\x6d\x61\x67\x65\x52\x65\x61\x64\x79\x71\xc9\x65\x3c\x00\x00\x01\x33\x49\x44\x41\x54\x78\xda\xec\xdb\xeb\x6e\xc2\x30\x0c\x06\xd0\xa4\x14\xf6\xfe\xaf\x3b\xc6\xb2\x15\xb5\x93\xeb\x5e\xb4\x21\x95\x4d\xda\x39\x92\x49\x20\xe5\xbf\x3f\x1c\x6a\x6b\xad\x00\x00\x00\xff\x4b\x3f\xbc\xd4\x5a\xf7\x9e\xa9\x0f\x9e\x01\x00\x00\xc7\x6a\x8f\x9c\x0d\xc3\x80\xfe\x1b\xcd\x7d\x5d\xd9\x57\x81\x00\x00\x00\xfe\x4c\x00\x68\x3f\x0d\x06\xfd\x46\x43\xbf\xb6\xc6\xda\x0b\x05\x00\x00\xc0\xf3\xc2\x40\x5c\x63\xd5\x74\x16\xdf\xcf\x82\xc0\x5e\xf3\xdf\xa5\x75\x2b\x14\x00\x00\x00\xcf\x0d\x01\xb1\xde\xd3\x9a\x43\xc0\x57\x18\xd8\x9b\x08\xc4\xe6\x7f\xa8\x53\xd8\xe7\x50\x20\x0c\x00\x00\xc0\xef\x84\x80\xd8\xfc\x0f\x75\x1b\x7b\xf3\x1c\x0a\x36\x27\x02\x25\x85\x80\x2e\x85\x80\x3e\x85\x81\xae\x2c\x27\x04\x00\x00\xc0\xf1\x41\xa0\xa5\xe6\x3f\x87\x80\x18\x06\x4a\x99\x4f\x08\x56\x83\x40\xbe\x0e\x74\x0a\x21\xe0\x9c\x02\xc1\xa9\x2c\xa7\x03\x00\x00\xc0\xf1\x41\x20\xfe\xda\x7f\x1b\xeb\x2d\x04\x80\x29\x0c\x4c\xcf\xd7\xb0\x9f\x05\x81\x7c\xc5\x27\x4e\x02\xce\x2b\x95\x27\x04\xd3\x77\x00\x00\x80\x63\xe5\x10\x30\x05\x80\xeb\x58\x35\x35\xfe\xf9\x0f\xc4\xf7\xcf\xd7\x26\x02\xf9\x3a\xd0\xd0\xf8\x5f\x3e\xeb\x65\x5c\x2f\x65\x3e\x21\x88\x61\xc0\x54\x00\x00\x00\x8e\xd3\xca\x72\x12\x70\x1d\xc3\xc0\xeb\xd8\x9b\x6f\x85\x80\xa9\xee\x3e\x04\x18\x00\x67\x7a\x60\x82\x24\x4c\x0a\x02\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x51\xf1\xa7\xdc\xa1\x01\x00\x00")

func topPngBytes() ([]byte, error) {
	return bindataRead(
		_topPng,
		"top.png",
	)
}

func topPng() (*asset, error) {
	bytes, err := topPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "top.png", size: 417, mode: os.FileMode(420), modTime: time.Unix(1574103504, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x56\x4d\x6f\xe3\x36\x10\x3d\x5b\xbf\x82\x4d\x60\xa0\xeb\x46\x8a\xe4\xd8\x9b\x44\x3e\xb5\x87\x16\x05\x72\x6b\xd1\x4b\x51\x2c\x68\x71\x64\x0d\x96\x22\x05\x92\x76\xec\x2e\xf2\xdf\x0b\x92\xfa\xa0\x64\x27\xdd\x2e\xda\x43\xd7\x0a\x62\x8b\xe4\xbc\x19\xbe\x99\x79\xe4\x56\xb2\x53\xf4\x29\x9a\x6d\x69\xf1\x71\xa7\xe4\x5e\xb0\xfc\xba\xb4\x9f\x4d\x34\x2b\xa5\x30\x71\x49\x6b\xe4\xa7\xfc\xea\x69\x5f\x20\xa3\xe4\x27\x45\x05\x83\xab\x1b\xf2\x2b\xad\x64\x4d\x6f\xc8\xf7\x0a\x29\xbf\x21\xbf\x81\x62\x54\xd0\x1b\xa2\xa9\xd0\xb1\x06\x85\x3d\x82\xc6\x3f\x21\xd7\x35\xe5\x7c\x13\xcd\x6a\xaa\x76\x28\xf2\x87\xe6\x48\x52\x92\xbd\x6f\x8e\x9b\x68\x66\xe0\x68\x62\xca\x71\x27\xf2\x02\x84\x01\xb5\x89\x5e\xa2\xe8\xba\x94\xaa\xfe\x50\x48\x61\x28\x0a\x50\x17\x82\xdc\x44\xb3\xad\x54\x0c\x54\x9e\x35\x47\xa2\x25\x47\x46\xae\x8b\xa2\x18\xdc\xa4\x84\xee\x8d\x1c\xbb\xe0\x50\x9a\x4d\x34\x7b\x46\x66\xaa\xfc\xfd\x2a\xb5\x21\x58\x77\x46\x36\xd6\x07\x43\xdd\x70\x7a\xca\xb7\x5c\x16\x1f\x37\xd1\xac\x02\xdc\x55\x26\xcf\xdc\xba\x0e\xd7\xbe\x39\x68\x92\x0e\x50\xeb\x1e\xaa\x94\xd2\xf8\x88\x47\x5e\x66\x05\x07\xaa\xf2\xad\x34\x95\x7d\x91\x5c\xaa\xfc\xfa\xd1\x7d\x2e\xb3\x30\x31\x6f\x28\x63\x28\x76\xf1\x56\x1a\x23\xeb\x9c\x64\x6b\x37\x3c\x90\x4c\x1e\xd6\xf3\x30\x02\x42\x3f\xbd\xe2\x87\x41\x21\x15\x35\x28\x45\x4e\x84\x14\xd0\x53\x39\x80\x37\x47\xc2\xa4\x31\xc0\x48\x6f\x6b\x91\xfd\xfc\x67\x33\xd5\x67\x60\x4a\x92\xcd\x6e\x42\x9b\x46\xa0\x51\xd2\xc2\xb5\x06\x4b\x4b\xad\xfb\x97\x0e\x5b\xce\x53\x92\xba\x41\x67\x7a\xbb\x58\x2c\x16\xe4\x49\xee\x24\xf9\x05\x0a\xbb\x09\x42\xec\xd0\xe2\x36\xaa\xb2\x71\x9d\xc4\xed\xee\x19\xd8\x27\x08\xcb\xfe\x44\x11\xb7\x31\x8f\x5c\x5d\xe0\xa8\xa5\xc8\x0d\xa3\x60\x20\x4c\x1e\x3f\xa4\xa9\xdf\xa9\x0d\xa9\xca\x08\xb5\x9e\xdf\x60\x25\x9d\x8f\x7d\xb6\x49\x95\x07\x50\x25\x97\xcf\x79\x85\x8c\x81\x70\x1b\x8c\xb0\xde\xb9\x7d\x40\x45\x0f\x28\x55\xbe\x57\xfc\xdb\x42\xeb\x5b\x84\x46\xec\x4a\x3c\x26\x95\x29\xde\x0d\xe5\xef\xc3\xb3\x86\x9e\x9a\x1f\xa5\xaa\x7b\x6a\x3c\x31\x23\xaa\xc3\xc6\x1e\xf5\xf5\x97\xb6\xf5\x4b\x34\x38\x20\x1c\x83\xca\xcf\xe6\x7d\xb6\xc9\x9e\xf7\xce\x9d\x71\xcb\x09\x47\x6d\x62\x6d\x4e\x1c\x62\x73\x6a\xa0\x23\x3b\xc8\x54\x98\x1a\x8f\xeb\x4d\x3b\x60\xef\x71\xca\xfc\x05\x80\x55\x73\x24\x6b\x5b\x5f\xcd\x91\x3c\xfa\x9e\x92\x1a\x5d\x8a\x15\x70\x6a\xf0\x00\x21\x6a\x4e\xcb\xb6\x8f\x27\x9d\x2b\x8c\x2d\x81\xab\xe4\x6a\xf3\x6a\xc2\xad\xdb\x03\x6a\xdc\x22\x47\x73\x0a\xb3\x9b\x6c\xf7\xc6\x48\xa1\xff\x5b\xf4\x33\xdc\xcb\xf4\xc4\x46\x36\x6d\xcb\xbe\x44\xd1\x82\x54\xa6\xe6\x24\x20\xb5\x2b\xdf\x79\x38\x1f\xfa\xb8\xb8\xa0\x05\x20\x0c\x0f\x61\x66\x50\x70\x14\x10\xb7\x11\x0c\x3c\x77\xeb\xda\x66\x5d\xad\x56\xa1\x80\xac\xdc\x59\x31\x55\x83\x87\x40\x47\x2c\x84\x6e\xa8\x38\xc3\x28\xb9\xa4\xa6\x53\xfc\x7f\x08\xc8\xf0\x90\x58\xcb\xf3\x0d\x4c\x81\x7d\x49\xae\x1e\xe6\x67\xf6\xca\x72\xf3\x06\x80\x9b\x7f\x13\xc1\xba\x20\x49\x0d\x0c\xf7\xf5\xd0\x56\xd3\xf2\x1f\x9c\xbd\xb1\x36\x71\xe5\x30\xad\x8b\x5e\x4f\x7f\xf0\x39\x6d\xf5\x02\x45\xb3\x37\x6d\x9e\x3f\x58\xdd\xb3\x76\xbd\x56\xb9\xd2\xe3\x30\x62\xf0\xde\xf5\x93\xf7\xe9\x35\x3f\xa8\x46\xe2\xf0\x26\xed\xbf\xf4\x92\xe8\xeb\xd0\x45\x9f\xaf\x47\x12\xff\xb3\x35\xd2\x84\x0a\x46\x9e\xe8\x16\x78\x17\x1c\xb7\x2f\x09\x03\x5d\x28\x6c\x6c\xf7\x3a\xb1\x0c\xb5\xb0\x2b\x83\xe5\x72\x79\xa1\xf4\x87\x18\x1e\xed\x81\xe9\xdf\x9f\x7d\x21\xdf\xa7\xa9\xd3\x24\x01\x9d\x50\x67\x6b\x17\x67\x58\x2b\x59\x1b\xa6\x2d\xba\x44\x9f\xea\xad\x9c\x4a\x5b\xb6\x9e\x4f\x61\xee\xda\x3c\x78\x6a\x3b\x4e\x27\x77\x1a\x62\xa5\x3e\x49\x6e\xfd\x1f\xd6\x74\x07\xfa\x56\x57\x94\xc9\xe7\x64\x87\xe5\x3b\xa2\xa0\x01\x6a\xe2\x23\x31\xb2\x39\x3b\xb5\x83\x7b\x10\x63\x6c\x98\xb6\x55\x34\xba\x24\xdd\xd9\x67\x98\xf7\xe4\xbf\xb1\xc0\xa9\xc4\x30\x7d\x5f\xd8\x67\xa0\xf9\xee\xee\x6e\x73\x41\xd9\x2f\x28\xf0\xd2\x1f\xec\x3d\x0d\x25\x72\x08\xda\xf6\x4b\x80\x2c\x93\x54\x01\x4d\xba\x1f\x5f\x23\xad\xff\xd2\x35\xfc\x9c\x4f\xdf\xb0\x8f\x8f\xbe\x36\x35\x70\x28\x4c\xe2\xbf\x3e\x3b\x2f\xd9\xe4\xb6\x96\xf5\x02\xfb\xbf\x4e\x83\xbd\x50\x8d\x19\xf9\xbd\xe0\x54\xeb\x3f\x82\xeb\xea\xd9\xb6\xfd\x31\x98\x97\xa8\xb4\x89\x8b\x0a\x39\xfb\xce\x1d\x89\x7f\x83\x33\xd8\x26\x9a\x96\x54\x21\x39\x4b\xc5\x58\x39\xc9\x37\x58\x37\x52\x19\x2a\x86\xb3\x2d\x20\x2a\x68\xb1\xe9\x81\xb0\x4e\x47\xb9\x7e\x6d\xda\x1b\x73\xaa\x76\x30\x4c\x4e\xea\x64\x32\xdb\x1f\x35\x7d\x4b\x0e\xe0\xfd\x3d\x18\xea\xf1\x92\x1e\xa3\x5d\xb1\xec\x56\xfc\x15\x00\x00\xff\xff\x19\xae\x71\x3c\x9b\x0e\x00\x00")

func viewCssBytes() ([]byte, error) {
	return bindataRead(
		_viewCss,
		"view.css",
	)
}

func viewCss() (*asset, error) {
	bytes, err := viewCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view.css", size: 3739, mode: os.FileMode(420), modTime: time.Unix(1574103820, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bottom.png": bottomPng,
	"index.html": indexHtml,
	"top.png":    topPng,
	"view.css":   viewCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bottom.png": &bintree{bottomPng, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"top.png":    &bintree{topPng, map[string]*bintree{}},
	"view.css":   &bintree{viewCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
